//alert('I am Working.');

/*
    변수 선언 법
    var    사용 하지 말자
    let    변수
    const  상수

    string 
    boolean
    number
      - float
      - 
*/

console.log('hello console log');

let a=10;
let b=15;
console.log(a+b, a-b);

const what = 'hello';
console.log(what);

const isTrue = true;
console.log(isTrue);

/*
    배열에 다른 타입의 데이터가 들어 갈수 있음.
    [] 사용
*/
const daysOfWeek =["monday","tuesday","wednesday", "thursday",5,6,7];
console.log(daysOfWeek);
console.log(daysOfWeek[2] + daysOfWeek[1]);

/*
    오브젝트
    {} 사용

    const로 선언된 오브젝트
    오브젝트 자체를 못바꾸지만 안에 내용을 바꿀수 있음.
*/

const info = {
    name : "sh",
    age:29,
    gender:"M"
}

console.log(info.name);

const me = {
    name:"jang sehun",
    age : 29,
    experience : [{company:"glamm",jon:"programmer"},{company:"spowide",jon:"programmer"}]
}

console.log(me);
console.log(me.experience);
console.log(me.experience[0].company);

// 함수
function sayHello(name, any) {
    console.log(`${name} is ${any}`);
}

sayHello("haha", 15);

// 오브젝트에 함수 
const calculator = {
    plus: function(a,b) {
        return a+b;
    }
}

const plus = calculator.plus(5,5);
console.log(plus);



// DOM document ohject module
let title =document.getElementById("title")
console.log(title);
title.innerHTML="inner html !!";
title.style.color="red";
console.dir(title);

//queryselector 문서에서 노가다로 찾는것?
title = document.querySelector("#title");
console.log(title);

// handler
function handleResize(event) {
    console.log(event);
}
window.addEventListener("resize",handleResize);
title.addEventListener("click",handleResize);


/*
    if else

*/

if(true) {
    console.log("it is true");
}else {

}

const BASE_COLOR = 'rgb(52,73,94)';
const OTHER_COLOR = "#7f8c8d";

function handleClick() {
    const currentColor = title.style.color;
    if(currentColor === BASE_COLOR) {
        title.style.color = OTHER_COLOR;
    }else {
        title.style.color = BASE_COLOR;
    }
}

title.style.color = BASE_COLOR;
title.addEventListener("click",handleClick);


/*
    클래스 추가 삭제.
    classlist
       .add
       .remove
       .toggle

*/

//시계
// setInterval(함수, 간격)
const clockContainer = document.querySelector(".js-clock");
const clockTitle = clockContainer.querySelector("h1");

function getTime() {
    const date= new Date();
    const minutes = date.getMinutes();
    const hours = date.getHours();
    const seconds = date.getSeconds();
    clockTitle.innerText =`${hours< 10 ? `0${hours}` : hours}:${minutes< 10 ? `0${minutes}` : minutes}:${seconds < 10 ? `0${seconds}` : seconds}`;
}

function initClock() {
    getTime();
    setInterval(getTime,1000);
}

initClock();


// 사용자 이름 받고 저장하기.
// 쿼리 셀렉터는 첫번쨰 해당하는 요소를 가져옴
// 쿼리셀렉터 올은 다 가져옴
// local storage

const form = document.querySelector(".js-form"),
input = document.querySelector("input"),
greeting = document.querySelector(".js-greetings");
const USER_LS ="currentUser",
SHOWING_CN = "showing";



function saveName(text) {
    localStorage.setItem(USER_LS,text);
}

function handleSubmit(event) {
    event.preventDefault();
    const currentValue = input.value;
    paintGreeting(currentValue);
    saveName(currentValue);
}

function askForName() {
    form.classList.add(SHOWING_CN);
    form.addEventListener("submit",handleSubmit);
}

function paintGreeting(text) {
    form.classList.remove(SHOWING_CN);
    greeting.classList.add(SHOWING_CN);
    greeting.innerText = `Hello ${text}`;
}

function loadName() {
    const currentUser = localStorage.getItem(USER_LS);

    if(currentUser===null) {
        askForName();
    }else {
        paintGreeting(currentUser);
    }
}

function initgretting() {
    loadName();
}

initgretting();

const toDoform = document.querySelector(".js-toDoForm"),
    toDoInput = toDoform.querySelector("input"),
    toDoList = document.querySelector(".js-toDoList");

    const TODOS_LS = 'toDos';
    let toDos =[];

    function deleteToDo(event) {
        const btn = event.target;
        const li = btn.parentNode;
        toDoList.removeChild(li);
        const cleanToDos = toDos.filter(function(toDo) {
            return toDo.id !== parseInt(li.id);
        });

        toDos = cleanToDos;
        saveToDos();
    }
    

    function saveToDos() {
        localStorage.setItem(TODOS_LS,JSON.stringify(toDos));
    }
    function paintToDo(text) {
        const li = document.createElement("li");
        const delBtn = document.createElement("button");
        delBtn.innerText="X";
        delBtn.addEventListener("click",deleteToDo);
        const span = document.createElement("span");
        const newId = toDos.length +1;
        span.innerText=text;
        li.appendChild(span);
        li.appendChild(delBtn);
        li.id = newId;
        toDoList.appendChild(li);
        const toDoObj = {
            text : text,
            id: newId
        };
        toDos.push(toDoObj);
        saveToDos();
    }

    function handleSubmit(event) {
        event.preventDefault();
        const currentValue = toDoInput.value;
        paintToDo(currentValue);
        toDoInput.value="";
    }

    function loadToDos() {
        const loadedToDos = localStorage.getItem(TODOS_LS);
        if(loadedToDos !== null) {
            const parsedToDos = JSON.parse(loadedToDos);
            parsedToDos.forEach(function(toDo) {
                paintToDo(toDo.text);
            });
        }
    }

    function toDoInit() {
        loadToDos();
        toDoform.addEventListener("submit",handleSubmit);
    }

    toDoInit();